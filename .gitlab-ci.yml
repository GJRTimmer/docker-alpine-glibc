stages:
  - build
  - deploy
  - clean
  - triggers
  
build:latest:
  stage: build
  tags: 
    - shell
  only:
    - master
  script:
    - docker build --pull --force-rm=true 
        --build-arg VCS_REF=`git rev-parse --short HEAD` 
        --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` 
        --tag=$(cat REPOSITORY)/${CI_PROJECT_PATH} .

build:branches:
  stage: build
  tags: 
    - shell
  except:
    - master
  script:
    - docker build --pull --force-rm=true 
        --build-arg VCS_REF=`git rev-parse --short HEAD` 
        --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` 
        --tag=$(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME} .
    
deploy:latest:
  stage: deploy
  tags:
    - shell
  only:
    - master
  script:
    - docker push $(cat REPOSITORY)/${CI_PROJECT_PATH}

deploy:branches:
  stage: deploy
  tags:
    - shell
  except:
    - master
  script:
    - docker push $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}

alpine:golang:
  stage: triggers
  tags:
    - shell
  except:
    - tags
  script:
    - curl -X POST -F token=a4d1a79e73cbcb71b14e343786de3a -F ref=master https://gitlab.timmertech.nl/api/v3/projects/19/trigger/builds > /dev/null

gitlab:runner:latest:
  stage: triggers
  tags:
    - shell
  except:
    - tags
  script:
    - curl -X POST -F token=0a1b3b7f64d4526e9fc771eebf5b23 -F ref=master https://gitlab.timmertech.nl/api/v3/projects/20/trigger/builds > /dev/null

gitlab:runner:synology:
  stage: triggers
  tags:
    - shell
  except:
    - tags
  script:
    - curl -X POST -F token=0a1b3b7f64d4526e9fc771eebf5b23 -F ref=synology https://gitlab.timmertech.nl/api/v3/projects/20/trigger/builds > /dev/null
    
clean:latest:
  stage: clean
  tags:
    - shell
  only:
    - master
  script:
    -   if [ ! -z $(docker images -q $(cat REPOSITORY)/${CI_PROJECT_PATH}) ]; then 
            docker rmi $(cat REPOSITORY)/${CI_PROJECT_PATH};
        fi

clean:branches:
  stage: clean
  tags:
    - shell
  except:
    - master
  script:
    -   if [ ! -z $(docker images -q $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}) ]; then 
            docker rmi $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME};
        fi